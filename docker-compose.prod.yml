# Docker Compose - Production Configuration
# RSP Education Agent V2 - Phase 6 Production Deployment
#
# This configuration sets up the complete production environment
# with all necessary services including database, Redis, and monitoring.

version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: rsp_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: rsp_education
      POSTGRES_USER: rsp_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secure_password_change_in_production}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    networks:
      - rsp_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U rsp_user -d rsp_education"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for caching and session storage
  redis:
    image: redis:7-alpine
    container_name: rsp_redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_password_change_in_production}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - rsp_network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # FastAPI Backend Application
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    container_name: rsp_backend
    restart: unless-stopped
    environment:
      # Database configuration
      DATABASE_URL: postgresql://rsp_user:${POSTGRES_PASSWORD:-secure_password_change_in_production}@postgres:5432/rsp_education
      
      # Redis configuration  
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis_password_change_in_production}@redis:6379/0
      
      # API Keys (set these in production)
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
      GOOGLE_API_KEY: ${GOOGLE_API_KEY}
      
      # Application settings
      APP_ENV: production
      APP_DEBUG: "false"
      APP_HOST: 0.0.0.0
      APP_PORT: 8000
      
      # Security settings
      SECRET_KEY: ${SECRET_KEY:-generate_secure_secret_key_in_production}
      ACCESS_TOKEN_EXPIRE_MINUTES: 30
      
      # Performance settings
      DB_POOL_SIZE: 10
      DB_MAX_OVERFLOW: 20
      WORKERS: 4
      
      # Logging
      LOG_LEVEL: INFO
      
    ports:
      - "8000:8000"
    volumes:
      - ./backend/logs:/app/logs
      - ./backend/uploads:/app/uploads
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - rsp_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: rsp_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./frontend/build:/usr/share/nginx/html:ro
    depends_on:
      - backend
    networks:
      - rsp_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring with Prometheus (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: rsp_prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - rsp_network
    profiles:
      - monitoring

  # Grafana for visualization (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: rsp_grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin_change_in_production}
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - rsp_network
    profiles:
      - monitoring

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  rsp_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16