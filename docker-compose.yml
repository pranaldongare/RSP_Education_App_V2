version: '3.8'

services:
  # PostgreSQL Database
  database:
    image: postgres:15-alpine
    container_name: rsp_education_db
    environment:
      POSTGRES_DB: rsp_education
      POSTGRES_USER: rsp_user
      POSTGRES_PASSWORD: rsp_password
      POSTGRES_HOST_AUTH_METHOD: trust
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - rsp_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U rsp_user -d rsp_education"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and session storage
  redis:
    image: redis:7-alpine
    container_name: rsp_education_redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - rsp_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  # Backend API Service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: rsp_education_backend
    environment:
      # Database Configuration
      DATABASE_URL: postgresql+asyncpg://rsp_user:rsp_password@database:5432/rsp_education
      REDIS_URL: redis://redis:6379/0
      
      # API Keys (replace with your actual keys)
      OPENAI_API_KEY: ${OPENAI_API_KEY:-your_openai_api_key_here}
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY:-your_anthropic_api_key_here}
      
      # Security
      SECRET_KEY: ${SECRET_KEY:-your_super_secret_jwt_key_here_change_in_production}
      ALGORITHM: HS256
      ACCESS_TOKEN_EXPIRE_MINUTES: 60
      REFRESH_TOKEN_EXPIRE_DAYS: 30
      
      # AI Models
      OPENAI_MODEL: gpt-3.5-turbo
      ANTHROPIC_MODEL: claude-3-sonnet-20240229
      
      # Application Settings
      DEBUG: "false"
      LOG_LEVEL: INFO
      CORS_ORIGINS: "http://localhost:3000,http://localhost:80,http://frontend:80"
      
    volumes:
      - ./backend/logs:/app/logs
      - ./backend/data:/app/data
    ports:
      - "8000:8000"
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - rsp_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend Web Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: rsp_education_frontend
    ports:
      - "3000:80"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - rsp_network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy (Optional - for production)
  nginx:
    image: nginx:alpine
    container_name: rsp_education_proxy
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - backend
      - frontend
    networks:
      - rsp_network
    profiles:
      - production

# Named volumes for data persistence
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

# Custom network
networks:
  rsp_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16